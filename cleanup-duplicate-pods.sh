#!/bin/bash

echo "üßπ LIMPIEZA DE PODS DUPLICADOS Y PROBLEM√ÅTICOS"
echo "=============================================="
echo ""

# Verificar que minikube est√© funcionando
if ! minikube status >/dev/null 2>&1; then
    echo "‚ùå minikube no est√° corriendo"
    echo "üí° Ejecuta: minikube start"
    exit 1
fi

echo "üìä Estado actual de pods en namespace ecommerce:"
kubectl get pods -n ecommerce
echo ""

echo "üîç Identificando pods problem√°ticos..."

# Obtener pods que NO est√°n en estado Running o que tienen 0/1 ready
FAILED_PODS=$(kubectl get pods -n ecommerce --no-headers | grep -E "(ContainerCreating|ImagePullBackOff|Terminating|Error|CrashLoopBackOff|Pending)" | awk '{print $1}')
NOT_READY_PODS=$(kubectl get pods -n ecommerce --no-headers | grep "0/1" | awk '{print $1}')

echo "‚ùå Pods con problemas encontrados:"
if [ -n "$FAILED_PODS" ]; then
    echo "$FAILED_PODS"
else
    echo "  Ning√∫n pod con errores detectado"
fi

if [ -n "$NOT_READY_PODS" ]; then
    echo ""
    echo "‚ö†Ô∏è Pods no listos (0/1):"
    echo "$NOT_READY_PODS"
fi

echo ""
echo "üóëÔ∏è ¬øQuieres eliminar todos los pods problem√°ticos? [y/N]:"
read -p "Respuesta: " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üßπ Eliminando pods problem√°ticos..."
    
    # Eliminar pods con problemas
    if [ -n "$FAILED_PODS" ]; then
        echo "$FAILED_PODS" | xargs -I {} kubectl delete pod {} -n ecommerce --force --grace-period=0
    fi
    
    if [ -n "$NOT_READY_PODS" ]; then
        echo "$NOT_READY_PODS" | xargs -I {} kubectl delete pod {} -n ecommerce --force --grace-period=0
    fi
    
    echo ""
    echo "‚è≥ Esperando que Kubernetes recree los pods..."
    sleep 10
    
    echo ""
    echo "üìä Estado despu√©s de la limpieza:"
    kubectl get pods -n ecommerce
    
else
    echo "üö´ Limpieza cancelada"
fi

echo ""
echo "üîÑ Alternativa: Reiniciar deployments para pods problem√°ticos"
echo "=================================================="

# Funci√≥n para reiniciar deployment
restart_deployment() {
    local deployment=$1
    echo "üîÑ Reiniciando deployment: $deployment"
    kubectl rollout restart deployment/$deployment -n ecommerce
    kubectl rollout status deployment/$deployment -n ecommerce --timeout=300s
}

echo ""
echo "¬øQuieres reiniciar los deployments problem√°ticos? [y/N]:"
read -p "Respuesta: " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üîÑ Reiniciando deployments..."
    
    # Lista de deployments a reiniciar bas√°ndose en los pods problem√°ticos
    DEPLOYMENTS_TO_RESTART=(
        "api-gateway"
        "order-service" 
        "payment-service"
        "proxy-client"
        "service-discovery"
    )
    
    for deployment in "${DEPLOYMENTS_TO_RESTART[@]}"; do
        if kubectl get deployment $deployment -n ecommerce >/dev/null 2>&1; then
            restart_deployment $deployment
        else
            echo "‚ö†Ô∏è Deployment $deployment no encontrado"
        fi
    done
    
    echo ""
    echo "‚úÖ Reinicio de deployments completado"
    echo ""
    echo "üìä Estado final:"
    kubectl get pods -n ecommerce
    echo ""
    kubectl get svc -n ecommerce
    
else
    echo "üö´ Reinicio cancelado"
fi

echo ""
echo "üåê URLs de acceso (una vez que los pods est√©n listos):"
MINIKUBE_IP=$(minikube ip 2>/dev/null || echo "MINIKUBE_IP")
echo "  ‚Ä¢ Frontend: http://$MINIKUBE_IP:30900/swagger-ui.html"
echo "  ‚Ä¢ API Gateway: http://$MINIKUBE_IP:30080"
echo "  ‚Ä¢ Service Discovery: http://$MINIKUBE_IP:30761"

echo ""
echo "üîç Para monitorear el progreso:"
echo "  kubectl get pods -n ecommerce -w" 