pipeline {
    agent any
    
    tools {
        maven 'Maven'
    }
    
    environment {
        PROJECT_VERSION = '0.1.0'
        DOCKER_IMAGE = "shipping-service-ecommerce"
        DOCKER_TAG = "${BUILD_NUMBER}"
        MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins_home/.m2/repository'
        SERVICE_NAME = 'shipping-service'
        K8S_NAMESPACE = 'ecommerce'
    }
    
    stages {
        stage('Verify Environment') {
            steps {
                echo 'Verifying build environment...'
                sh 'echo "Current JAVA_HOME: $JAVA_HOME"'
                sh 'java -version'
                sh 'mvn -version'
                sh 'docker --version'
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                dir('shipping-service') {
                    sh 'mvn clean test -Dtest=*ServiceTest'
                }
            }
            post {
                always {
                    dir('shipping-service') {
                        junit 'target/surefire-reports/*.xml'
                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'Running integration tests...'
                dir('shipping-service') {
                    sh 'mvn test -Dtest=*IntegrationTest'
                }
            }
            post {
                always {
                    dir('shipping-service') {
                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building the application...'
                dir('shipping-service') {
                    sh 'mvn clean compile package -DskipTests'
                }
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                echo 'Running code quality analysis...'
                dir('shipping-service') {
                    sh 'mvn checkstyle:check || echo "Checkstyle warnings found"'
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                echo 'Building Docker image...'
                dir('shipping-service') {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:dev-${DOCKER_TAG}"
                    sh 'docker images | grep shipping-service-ecommerce'
                }
            }
        }
        
        stage('Deploy to Dev Environment') {
            when {
                branch 'develop'
            }
            steps {
                echo 'Deploying to development environment...'
                script {
                    try {
                        sh 'kubectl version --client'
                        sh 'kubectl cluster-info --request-timeout=5s'
                        
                        dir('shipping-service/k8s') {
                            sh "kubectl apply -f namespace.yaml"
                            sh "kubectl apply -f configmap.yaml"
                            sh "sed 's/{{BUILD_NUMBER}}/${BUILD_NUMBER}/g' deployment.yaml | kubectl apply -f -"
                            sh "kubectl apply -f service.yaml"
                            
                            sh "kubectl rollout status deployment/${SERVICE_NAME} -n ${K8S_NAMESPACE} --timeout=300s"
                            
                            echo 'Development deployment successful!'
                            sh "kubectl get pods -n ${K8S_NAMESPACE} -l app=${SERVICE_NAME}"
                            sh "kubectl get svc -n ${K8S_NAMESPACE} -l app=${SERVICE_NAME}"
                        }
                    } catch (Exception e) {
                        echo "Kubernetes deployment failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('E2E Tests') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'staging'
                }
            }
            steps {
                echo 'Running E2E tests...'
                dir('.') {
                    sh 'mvn test -Dtest=*E2ETest -Dspring.profiles.active=test'
                }
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'master'
            }
            steps {
                echo 'Deploying to production environment...'
                input message: 'Deploy shipping service to production?', ok: 'Deploy'
                
                script {
                    try {
                        dir('shipping-service/k8s') {
                            sh "kubectl apply -f namespace-prod.yaml"
                            sh "kubectl apply -f configmap-prod.yaml"
                            sh "sed 's/{{BUILD_NUMBER}}/${BUILD_NUMBER}/g' deployment-prod.yaml | kubectl apply -f -"
                            sh "kubectl apply -f service-prod.yaml"
                            
                            sh "kubectl rollout status deployment/${SERVICE_NAME} -n ${K8S_NAMESPACE}-prod --timeout=600s"
                            
                            echo 'Production deployment successful!'
                            
                            // Generar Release Notes
                            generateReleaseNotes()
                        }
                    } catch (Exception e) {
                        echo "Production deployment failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                dir('shipping-service') {
                    archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: false
                    archiveArtifacts artifacts: 'target/surefire-reports/**/*', allowEmptyArchive: true
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed.'
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
            script {
                if (env.BRANCH_NAME == 'master') {
                    emailext (
                        subject: "SUCCESS: Shipping Service Deployment - Build ${BUILD_NUMBER}",
                        body: "Shipping Service has been successfully deployed to production.\n\nBuild: ${BUILD_NUMBER}\nCommit: ${env.GIT_COMMIT}\n\nView the build: ${BUILD_URL}",
                        to: "devops@company.com"
                    )
                }
            }
        }
        failure {
            echo 'Pipeline failed!'
            emailext (
                subject: "FAILURE: Shipping Service Pipeline - Build ${BUILD_NUMBER}",
                body: "Shipping Service pipeline has failed.\n\nBuild: ${BUILD_NUMBER}\nCommit: ${env.GIT_COMMIT}\n\nView the build: ${BUILD_URL}",
                to: "devops@company.com"
            )
        }
        unstable {
            echo 'Pipeline unstable!'
        }
    }
}

def generateReleaseNotes() {
    script {
        def releaseNotes = """
# Shipping Service Release Notes - v${PROJECT_VERSION}.${BUILD_NUMBER}

**Release Date:** ${new Date().format('yyyy-MM-dd HH:mm:ss')}
**Build Number:** ${BUILD_NUMBER}
**Git Commit:** ${env.GIT_COMMIT}
**Branch:** ${env.BRANCH_NAME}

## Changes in this Release
- Shipping tracking improvements
- Delivery optimization algorithms
- Integration with carrier APIs
- Bug fixes and performance enhancements

## Test Results
- Unit Tests: Passed
- Integration Tests: Passed  
- E2E Tests: Passed
- Performance Tests: Completed

## Deployment Information
- Environment: Production
- Namespace: ${K8S_NAMESPACE}-prod
- Docker Image: ${DOCKER_IMAGE}:${DOCKER_TAG}

## Rollback Instructions
If issues are found, rollback using:
```
kubectl rollout undo deployment/${SERVICE_NAME} -n ${K8S_NAMESPACE}-prod
```

## Support
For shipping-related issues, contact the DevOps team.
        """
        
        writeFile file: 'SHIPPING_SERVICE_RELEASE_NOTES.md', text: releaseNotes
        archiveArtifacts artifacts: 'SHIPPING_SERVICE_RELEASE_NOTES.md', allowEmptyArchive: false
    }
} 